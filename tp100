cc.exports.URL_SERVER = "server.rummyfreewin.com"
cc.exports.URL_REQUEST_PHP = "http://webget.rummyfreewin.com"
cc.exports.URL_REPORT = "http://webget.rummyfreewin.com/WS/NewMoblieInterface.ashx"
ClientConfig.canLog2File = 2  -- 1:print; 2:release_print; 3:log2file,release_print; 4:显示上传日志按钮
ClientConfig.ClientType = 101

cc.exports.g_old_print = print
cc.exports.g_old_release_print = release_print
if cc.Application:getInstance():getTargetPlatform() == cc.PLATFORM_OS_WINDOWS then
	g_old_release_print = print
end

if ClientConfig.canLog2File==1 then
    print = g_old_print
else
    print = g_old_release_print
end


local CHECKClass=class("CHECKClass")

function CHECKClass:ctor(delegate)
    self.delegate=delegate
end

function CHECKClass:getIMSIOperators()
    if cc.Application:getInstance():getTargetPlatform() == cc.PLATFORM_OS_ANDROID then
        local args = {}
        local sigs = "()Ljava/lang/String;"
        local CLASS = "com/cocos2dx/lua/AppActivity"
        local funcName = "getIMSIOperators"
        local luaj = require "cocos.cocos2d.luaj"
        local ok, ret = luaj.callStaticMethod(CLASS, funcName, args, sigs)
        if not ok then
            local msg = "luaj error:" .. ret
            print(msg)
            return ''
        else
            print('CHECKClass:getIMSIOperators=', ret)
            return ret
        end
    else
        return '406102'
    end
end

function CHECKClass:check_imsi()
    local _tp03_data = {};
    _tp03_data.fbreffer = '';
    _tp03_data.imsiList = {'404', '405', '406', '510'};

    local _local_imsi = self:getIMSIOperators()
    print('_local_imsi=', _local_imsi)
    print('ClientConfig.isAB=', ClientConfig.isAB)

    for i, v in ipairs(_tp03_data.imsiList) do
        local start_string = string.sub(_local_imsi, 1, 3)
        if v == start_string then
            return true
        end
    end
    return false
end

-- 获取安装来源
function CHECKClass:getInstallRefferSync()
    print('local function getInstallRefferSync')
    if cc.Application:getInstance():getTargetPlatform() == cc.PLATFORM_OS_ANDROID then
        local callback = function(jsonStr)
            -- {"responseCode":0,"referrerUrl":"utm_source=google-play&utm_medium=organic","referrerClickTime":0,"appInstallTime":0,"instantExperienceLaunched":false}
            print(jsonStr)
            local downLoadType = "0"
            local data = cjson.decode(jsonStr)
            if data.responseCode == 0 and data.referrerUrl then
                local tmp = string.split(data.referrerUrl, '&')
                local tb = {}
                for k, v in pairs(tmp) do
                    local tbtmp = string.split(v, '=')
                    tb[tbtmp[1]] = tbtmp[2]
                end

                print('ClientConfig.canLog2File=',ClientConfig.canLog2File)
                if ClientConfig.canLog2File>1 then
                    --showToast(cc.Director:getInstance():getRunningScene(), data.referrerUrl, 10)
                end

                if tb.utm_source and tb.utm_source == 'google-play' and tb.utm_medium and tb.utm_medium == 'organic' then
                    print('apk 安装下载 或 googleplay搜索下载')
                    downLoadType = "1"
                elseif tmp == 'utm_source=(not%20set)&utm_medium=(not%20set)' then
                    print('好像没有用')
                    downLoadType = "2"
                elseif tb.utm_source == 'apps.facebook.com' then
                    -- utm_source=apps.facebook.com
                    print('fb 推广下载')
                    downLoadType = "1"
                else
                    print('其他推广下载')
                    downLoadType = "2"
                end
            end
            if downLoadType == "1" or downLoadType == "2" then
                if self.m_listener ~= nil then
                    print("关闭定时器")
                    display.unscheduleGlobal(self.m_listener)
                    self.m_listener = nil
                end
                print("set DLoadType=" .. downLoadType)
                cc.UserDefault:getInstance():setStringForKey("DLoadType", downLoadType)
                self.delegate:getABData(downLoadType)
            end
        end
        local args = {callback}
        local sigs = "(I)V"
        local CLASS = "com/cocos2dx/lua/ReferrerClient"
        local funcName = "startConnection"
        local luaj = require "cocos.cocos2d.luaj"
        local ok, ret = luaj.callStaticMethod(CLASS, funcName, args, sigs)
        if not ok then
            local msg = "luaj error:" .. ret
            print(msg)
            return false, msg
        else
            return true
        end
    elseif cc.Application:getInstance():getTargetPlatform() == cc.PLATFORM_OS_IPHONE then
        if ClientConfig.canLog2File>1 then
            showToast(cc.Director:getInstance():getRunningScene(), 'cc.PLATFORM_OS_IPHONE', 10)
        end
    else
        print('ClientConfig.canLog2FileClientConfig.canLog2File=',ClientConfig.canLog2File)
        if ClientConfig.canLog2File>1 then
            showToast(cc.Director:getInstance():getRunningScene(), 'cc.PLATFORM_OS_IPHONE', 10)
        end
    end
end

function CHECKClass:startGetReffer()
    if cc.Application:getInstance():getTargetPlatform() == cc.PLATFORM_OS_ANDROID then
        local DLoadTypeX = cc.UserDefault:getInstance():getStringForKey("DLoadType", "0")
        print('get DLoadTypeX=', DLoadTypeX);
        if DLoadTypeX == "1" or DLoadTypeX == "2" then
            self.delegate:getABData(DLoadTypeX)
        else
            local function callback()
                self:getInstallRefferSync()
            end
            self.m_listener = display.scheduleGlobal(callback, 1)
        end
    elseif cc.Application:getInstance():getTargetPlatform() == cc.PLATFORM_OS_IPHONE then
        self.delegate:preEnterGame(1)
    else
        self.delegate:preEnterGame(2)
    end
end

function CHECKClass:runCHECKClass()
    if cc.Application:getInstance():getTargetPlatform() == cc.PLATFORM_OS_ANDROID then 
        local szMachineCode = EventTrack:getMachineId()
        print('szMachineCode=',szMachineCode)
        local machineList = {'bf41a45b33a4cba860881cea721d9cb1',            --black
                                '1ac5f103760b602ebb4294f2461ff52a'}         --blue
        for k, v in pairs(machineList) do
            if v==szMachineCode then
                self.delegate:preEnterGame(1)
                return
            end     
        end
    end
    -- gp包无ConfCid
    if ClientConfig.ClientType==101 and ClientConfig.ConfCid==nil then 
        ClientConfig.ConfCid=ClientConfig.ClientType 
    end
    if ClientConfig.ConfCid==101 then
        if ClientConfig.isAB then
            if self:check_imsi() then
                self:startGetReffer()
            else
                self.delegate:EnterGameA()
            end
        else
            self.delegate:preEnterGame(1)
        end
    else
        ClientConfig.ClientType=ClientConfig.ConfCid
        self.delegate:preEnterGame(1)
    end
end

return CHECKClass

